insert {
    graph ?graph {
        ?record dcterms:identifier ?journal .
    }
}
where {
    graph ?graph {
        ?record a rdfg:Graph .
        ?record stm:metadata ?metadata .
        optional { ?metadata prism:issn ?pissn .
            bind(iri(concat("https://portal.issn.org/resource/ISSN/", ?pissn)) as ?journal_pissn)
        }
        optional { ?metadata prism:eIssn ?eissn .
            bind(iri(concat("https://portal.issn.org/resource/ISSN/", ?eissn)) as ?journal_pissn)
        }
        optional { ?metadata fabio:hasIssnL ?lissn .
            bind(iri(concat("https://portal.issn.org/resource/L-ISSN/", ?lissn)) as ?journal_lissn)
        }
        bind(coalesce(?journal_lissn, ?journal_lissn, ?journal_lissn, bnode()) as ?journal)
    }
}

# Jobmap
insert {
    graph sub:docinfo {
        this: a pad:PAD ;
            pad:hasProvenance sub:provenance ;
            pad:hasAssertion sub:assertion ;
            pad:hasDocInfo sub:docinfo .
        sub:provenance a pad:Provenance .
        sub:assertion a pad:Assertion .
        sub:docinfo a pad:DocInfo .
    }

    graph sub:provenance {
        sub:assertion dcterms:license ?license ;
            dcterms:created ?date ;
            dcterms:creator ?creator .
    }
}
where {
    ?record a rdfg:Graph .
    ?record ppo:provenance ?provenance .
    ?provenance dcterms:created ?date ;
        dcterms:creator ?creator ;
        dcterms:license ?license .
}

# Metadata
insert {
    graph sub:assertion {
        ?journal a ppo:Platform ;
            schema:name ?name ;
            dcterms:publisher ?publisher ;
            ?hasissn ?issn .
        ?publisher a pro:publisher .
    }
}
where {
    ?record a rdfg:Graph .
    ?record dcterms:identifier ?journal .
    ?record stm:metadata ?metadata .
    optional { ?metadata stm:journalName ?name } .
    optional { ?metadata ppo:hasPublisher ?publisher } .
    optional { ?metadata ?hasissn ?issn . 
        filter ( ?hasissn in (prism:issn, prism:eIssn, fabio:hasIssnL) )
    } .
}

# Evaluation Policy
insert {
    graph sub:assertion {
        ?journal a ppo:Platform ;
            ppo:hasPolicy ?policy .

        ?policy a ppo:EvaluationPolicy ;
            ppo:covers ?ppc .

        ?policy ppo:involves sub:author .
        sub:author a pro:Author ;
            ?author_an_reviewer sub:reviewer ;
            ?author_an_curator sub:curator .

        ?policy ppo:involves sub:reviewer .
        sub:reviewer a pro:peer-reviewer ;
            ppo:identityPubliclyAccessible ?reviewer_published ;
            ppo:identityPubliclyAccessible ?reviewer_published_reviewer ;
            ?reviewer_an_author sub:author ;
            ?reviewer_an_curator sub:curator ;
            ?riw_author sub:author ;
            ?riw_curator sub:curator ;
            ?riw_reviewer sub:reviewer .
        ?reviewer_published ppo:optInBy ?reviewer_published_reviewer .

        ?policy ppo:involves sub:curator .
        sub:curator a ppo:Editor .
        sub:curator ppo:identityPubliclyAccessible ?editor_published .

        ?reviewreport a ppo:PeerReviewReport .
        ?policy ppo:covers ?reviewreport .
        ?reviewreport ppo:publiclyAccessible ?rr_published .
        ?rr_published ppo:optInBy ?rr_published_author .
        ?rr_published ppo:optInBy ?rr_published_reviewer .

        ?submittedmanuscript a ppo:SubmittedManuscript .
        ?policy ppo:covers ?submittedmanuscript .
        ?submittedmanuscript ppo:publiclyAccessible ?sm_published .
        ?sm_published ppo:optInBy ?sm_published_author .

        ?reviewsummaries a ppo:ReviewSummaries .
        ?policy ppo:covers ?reviewsummaries .
        ?reviewsummaries ppo:publiclyAccessible ?rs_published .

        ?authoreditorcommunication a ppo:AuthorEditorCommunication .
        ?policy ppo:covers ?authoreditorcommunication .
        ?authoreditorcommunication ppo:publiclyAccessible ?aec_published .
    }
}
where {
    ?record a rdfg:Graph .
    ?record dcterms:identifier ?journal .

    # bind named individuals for convenience
    bind(sub:evaluationPolicy as ?policy) .
    
    optional { ?record stm:identityTransparency ?id . }
    optional { ?id stm:singleAnonymised true .
        bind(ppo:anonymousTo as ?reviewer_an_author) .
        bind(ppo:identifiedTo as ?author_an_reviewer) .
        bind(ppo:identifiedTo as ?reviewer_an_curator) .
        bind(ppo:identifiedTo as ?author_an_curator) .
    }
    optional { ?id stm:doubleAnonymised true .
        bind(ppo:anonymousTo as ?reviewer_an_author) .
        bind(ppo:anonymousTo as ?author_an_reviewer) .
        bind(ppo:identifiedTo as ?reviewer_an_curator) .
        bind(ppo:identifiedTo as ?author_an_curator) .
    }
    optional { ?id stm:tripleAnonymised true .
        bind(ppo:anonymousTo as ?reviewer_an_author) .
        bind(ppo:anonymousTo as ?author_an_reviewer) .
        bind(ppo:anonymousTo as ?reviewer_an_curator) .
        bind(ppo:anonymousTo as ?author_an_curator) .
    }
    optional { ?id stm:allIdentitiesVisible true .
        bind(ppo:identifiedTo as ?reviewer_an_author) .
        bind(ppo:identifiedTo as ?author_an_reviewer) .
        bind(ppo:identifiedTo as ?reviewer_an_curator) .
        bind(ppo:identifiedTo as ?author_an_curator) .
    }

    optional { ?record stm:postPublicationCommenting [ stm:onInvitation true ] .
        bind(ppo:postPublicationCommentingOnInvitation as ?ppc) }
    optional { ?record stm:postPublicationCommenting [ stm:open true ] .
        bind(ppo:postPublicationCommentingOpen as ?ppc) }

    optional { ?record stm:reviewerInteractsWith ?riw . }
    optional { ?riw stm:authors true .
        bind(ppo:interactsWith as ?riw_author) .
    }
    optional { ?riw stm:editor true .
        bind(ppo:interactsWith as ?riw_curator) .
    }
    optional { ?riw stm:otherReviewers true .
        bind(ppo:reviewerInteractsWith as ?riw_reviewer) .
    }

    optional { ?record stm:reviewInformationPublished ?rip . }
    optional {
        ?rip stm:authorEditorCommunication ?aec_published_p .
        values (?aec_published_p ?aec_published) {
            (true ppo:Accessible)
            (false ppo:NotAccessible)
        }
        bind(sub:authorEditorCommunication as ?authoreditorcommunication)
    }
    optional {
        ?rip stm:reviewReports ?rr_published_p .
        ?rip stm:reviewReportsAuthorOptIn ?rr_published_author_p .
        ?rip stm:reviewReportsReviewerOptIn ?rr_published_reviewer_p .
        bind(sub:reviewReport as ?reviewreport)
        bind(if(?rr_published_p=true, ppo:Accessible, ppo:NotAccessible) as ?rr_published).
        bind(if(?rr_published_author_p=true || ?rr_published_reviewer_p=true, bnode(), ?rr_published) as ?rr_published).
        bind(if(?rr_published_author_p=true, sub:author, ?_) as ?rr_published_author) .
        bind(if(?rr_published_reviewer_p=true, sub:reviewer, ?_) as ?rr_published_reviewer) .
    }
    optional {
        ?rip stm:reviewSummaries ?rs_published_p .
        values (?rs_published_p ?rs_published) {
            (true ppo:Accessible)
            (false ppo:NotAccessible)
        }
        bind(sub:reviewSummaries as ?reviewsummaries)
    }
    optional {
        ?rip stm:submittedManuscripts ?sm_published_p .
        ?rip stm:submittedManuscriptsAuthorOptIn ?sm_published_author_p .
        bind(sub:submittedManuscript as ?submittedmanuscript)
        bind(if(?sm_published_p=true, ppo:Accessible, ppo:NotAccessible) as ?sm_published) .
        bind(if(?sm_published_author_p=true, bnode(), ?sm_published) as ?sm_published) .
        bind(if(?sm_published_author_p=true, sub:author, ?_) as ?sm_published_author) .
    }
    optional {
        ?rip stm:reviewerIdentities ?reviewer_published_p .
        ?rip stm:reviewerIdentitiesReviewerOptIn ?reviewer_published_reviewer_p .
        bind(if(?reviewer_published_p=true, ppo:Accessible, ppo:NotAccessible) as ?reviewer_published) .
        bind(if(?reviewer_published_reviewer_p, bnode(), ?reviewer_published) as ?reviewer_published) .
        bind(if(?reviewer_published_reviewer_p, sub:reviewer, ?_) as ?reviewer_published_reviewer) .
    }
    optional { ?rip stm:editorIdentities ?editor_published_p .
        values (?editor_published_p ?editor_published) {
            (true ppo:Accessible)
            (false ppo:NotAccessible)
        }
    }
}
